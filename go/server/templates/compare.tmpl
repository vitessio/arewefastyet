<!--
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!DOCTYPE html>
<html lang="en">

{{template "headHTML" .}}

<body>

    <div style="min-height: 90vh;">

    <!-- Navigation -->
    {{ template "navigation" "/compare" }}

    <section class="py-5">
        <div>
            <div class="container">
                <h1>Compare</h1>

                <div class="main">
                    <form type="GET" action="/compare">
                        <div class="input-group">
                            <input type="text" class="form-control" value="{{.reference.SHA}}" placeholder="Reference commit SHA" name="r">
                            <input type="text" class="form-control" value="{{.compare.SHA}}" placeholder="Compare commit SHA" name="c">
                            <div class="input-group-append">
                                <button class="btn btn-secondary" type="submit">
                                    Compare
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="container">

            {{ if and .compare.SHA .reference.SHA }}
                <h2>Comparing <a href="https://github.com/vitessio/vitess/commit/{{ .compare.SHA }}" target="_blank">{{.compare.short}}</a> with <a href="https://github.com/vitessio/vitess/commit/{{ .reference.SHA }}" target="_blank">{{.reference.short}}</a>.</h2>
                {{ $compareSHAs := .compare }}
                {{ $referenceSHAs := .reference }}

                {{ if .macrobenchmark }}
                    {{ range $key, $val := .macrobenchmark }}

                    <h4>{{ $key.ToUpper }}</h4>
                    {{ if $val }}
                    <table class="table table-striped table-hover table-sm table-bordered" >
                        <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col" class="text-center"><a href="https://github.com/vitessio/vitess/commit/{{ $compareSHAs.SHA }}" target="_blank">{{$compareSHAs.short}}</a></th>
                            <th scope="col" class="text-center"><a href="https://github.com/vitessio/vitess/commit/{{ $referenceSHAs.SHA }}" target="_blank">{{$referenceSHAs.short}}</a></th>
                            <th scope="col" class="text-center">Improved by %</th>
                        </tr>
                        </thead>
                        <tbody>
                        {{ range $elem := $val }}
                            <tr>
                                <th scope="row" class="text-center">QPS Total</th>
                                <td class="text-center">{{ $elem.Compare.Result.QPS.TotalStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.QPS.TotalStr }}</td>
                                <td class="text-center">{{ $elem.Diff.QPS.TotalStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">QPS Reads</th>
                                <td class="text-center">{{ $elem.Compare.Result.QPS.ReadsStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.QPS.ReadsStr }}</td>
                                <td class="text-center">{{ $elem.Diff.QPS.ReadsStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">QPS Writes</th>
                                <td class="text-center">{{ $elem.Compare.Result.QPS.WritesStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.QPS.WritesStr }}</td>
                                <td class="text-center">{{ $elem.Diff.QPS.WritesStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">QPS Other</th>
                                <td class="text-center">{{ $elem.Compare.Result.QPS.OtherStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.QPS.OtherStr }}</td>
                                <td class="text-center">{{ $elem.Diff.QPS.OtherStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">TPS</th>
                                <td class="text-center">{{ $elem.Compare.Result.TPSStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.TPSStr }}</td>
                                <td class="text-center">{{ $elem.Diff.TPSStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Latency</th>
                                <td class="text-center">{{ $elem.Compare.Result.LatencyStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.LatencyStr }}</td>
                                <td class="text-center">{{ $elem.Diff.LatencyStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Errors</th>
                                <td class="text-center">{{ $elem.Compare.Result.ErrorsStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.ErrorsStr }}</td>
                                <td class="text-center">{{ $elem.Diff.ErrorsStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Reconnects</th>
                                <td class="text-center">{{ $elem.Compare.Result.ReconnectsStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.ReconnectsStr }}</td>
                                <td class="text-center">{{ $elem.Diff.ReconnectsStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Time</th>
                                <td class="text-center">{{ $elem.Compare.Result.TimeStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.TimeStr }}</td>
                                <td class="text-center">{{ $elem.Diff.TimeStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Threads</th>
                                <td class="text-center">{{ $elem.Compare.Result.ThreadsStr }}</td>
                                <td class="text-center">{{ $elem.Reference.Result.ThreadsStr }}</td>
                                <td class="text-center">{{ $elem.Diff.ThreadsStr }}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="text-center">Total CPU time</th>
                                <td class="text-center">{{ formatFloat $elem.Compare.Metrics.TotalComponentsCPUTime }}</td>
                                <td class="text-center">{{ formatFloat $elem.Reference.Metrics.TotalComponentsCPUTime }}</td>
                                <td class="text-center">{{ formatFloat $elem.DiffMetrics.TotalComponentsCPUTime }}</td>
                            </tr>
                            {{ range $componentCPUName, $componentCPUValue := $elem.Compare.Metrics.ComponentsCPUTime }}
                                <tr>
                                    <th scope="row" class="text-center">CPU time {{$componentCPUName}}</th>
                                    <td class="text-center">{{ formatFloat (index $elem.Compare.Metrics.ComponentsCPUTime $componentCPUName) }}</td>
                                    <td class="text-center">{{ formatFloat (index $elem.Reference.Metrics.ComponentsCPUTime $componentCPUName) }}</td>
                                    <td class="text-center">{{ formatFloat (index $elem.DiffMetrics.ComponentsCPUTime $componentCPUName) }}</td>
                                </tr>
                            {{ end }}
                            <tr>
                                <th scope="row" class="text-center">Total Allocs bytes</th>
                                <td class="text-center">{{ formatBytes $elem.Compare.Metrics.TotalComponentsMemStatsAllocBytes }}</td>
                                <td class="text-center">{{ formatBytes $elem.Reference.Metrics.TotalComponentsMemStatsAllocBytes }}</td>
                                <td class="text-center">{{ formatFloat $elem.DiffMetrics.TotalComponentsMemStatsAllocBytes }}</td>
                            </tr>
                            {{ range $componentAllocsName, $componentAllocsValue := $elem.Compare.Metrics.ComponentsMemStatsAllocBytes }}
                            <tr>
                                <th scope="row" class="text-center">Allocs bytes {{$componentAllocsName}}</th>
                                <td class="text-center">{{ formatBytes (index $elem.Compare.Metrics.ComponentsMemStatsAllocBytes $componentAllocsName) }}</td>
                                <td class="text-center">{{ formatBytes (index $elem.Reference.Metrics.ComponentsMemStatsAllocBytes $componentAllocsName) }}</td>
                                <td class="text-center">{{ formatFloat (index $elem.DiffMetrics.ComponentsMemStatsAllocBytes $componentAllocsName) }}</td>
                            </tr>
                            {{ end }}
                        {{ end }}
                        </tbody>
                    </table>
                    <canvas id="{{$key}}-bar-chart" height="75"></canvas>
                    {{ else if not $val }}
                        <div class="alert alert-warning" role="alert">
                            No {{ $key.ToUpper }} macro benchmark results. You can <a href="/request_benchmark?s=[{{$referenceSHAs.SHA}},{{ $compareSHAs.SHA }}]&type=macrobench-{{$key}}">request</a> a run.
                        </div>
                    {{ end }}
                {{ end }}
                {{ else if not .macrobenchmark }}
                    <div class="alert alert-warning" role="alert">
                        No macro benchmark results. You can <a href="/request_benchmark?s={{ .search }}&type=macrobench">request</a> a run.
                    </div>
                {{ end }}
            </div>
            <div class="container">
            <h3>Micro benchmarks</h3>
            {{ if .microbenchmark }}
            </div>
            <div class="container-xxl">
                <table class="table table-striped table-hover table-sm table-bordered">
                    <thead>
                    <tr>
                        <th scope="col">Package</th>
                        <th scope="col">Benchmark Name</th>
                        <th scope="col" colspan="3" class="text-center">Number of Iterations</th>
                        <th scope="col" colspan="3" class="text-center">Time/op</th>
                        <th scope="col" colspan="3" class="text-center">Bytes/op</th>
                        <th scope="col" colspan="3" class="text-center">Megabytes/s</th>
                        <th scope="col" colspan="3" class="text-center">Allocations/op</th>
                    </tr>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th class="text-center" scope="col">{{ $compareSHAs.short }}</th>
                        <th class="text-center" scope="col">{{ $referenceSHAs.short }}</th>
                        <th class="text-center" scope="col">Diff %</th>
                        <th class="text-center" scope="col">{{ $compareSHAs.short }}</th>
                        <th class="text-center" scope="col">{{ $referenceSHAs.short }}</th>
                        <th class="text-center" scope="col">Diff %</th>
                        <th class="text-center" scope="col">{{ $compareSHAs.short }}</th>
                        <th class="text-center" scope="col">{{ $referenceSHAs.short }}</th>
                        <th class="text-center" scope="col">Diff %</th>
                        <th class="text-center" scope="col">{{ $compareSHAs.short }}</th>
                        <th class="text-center" scope="col">{{ $referenceSHAs.short }}</th>
                        <th class="text-center" scope="col">Diff %</th>
                        <th class="text-center" scope="col">{{ $compareSHAs.short }}</th>
                        <th class="text-center" scope="col">{{ $referenceSHAs.short }}</th>
                        <th class="text-center" scope="col">Diff %</th>
                    </tr>
                    </thead>
                    <tbody>
                    {{range $val := .microbenchmark}}
                    <tr>
                        <td>{{ $val.PkgName }}</td>
                        <td><a href="/microbench/{{ $val.Name }}?subBenchmarkName={{ $val.SubBenchmarkName }}">{{ $val.SubBenchmarkName }}</a></td>
                        <td class="text-right">{{ $val.Last.OpsStr }}</td>
                        <td class="text-right">{{ $val.Current.OpsStr }}</td>
                        <td class="text-right {{if le $val.Diff.Ops -5.0 }} bg-danger {{ else if ge $val.Diff.Ops 5.0 }} bg-success {{ end }}">{{ formatFloat $val.Diff.Ops }}</td>

                        <td class="text-right">{{ $val.Last.NSPerOpToDurationStr }}</td>
                        <td class="text-right">{{ $val.Current.NSPerOpToDurationStr }}</td>
                        <td class="text-right {{if le $val.Diff.NSPerOp -10.0 }} bg-danger {{ else if ge $val.Diff.NSPerOp 10.0 }} bg-success {{ end }}">{{ formatFloat $val.Diff.NSPerOp }}</td>

                        <td class="text-right">{{ $val.Last.BytesPerOpStr }}</td>
                        <td class="text-right">{{ $val.Current.BytesPerOpStr }}</td>
                        <td class="text-right {{if le $val.Diff.BytesPerOp -10.0 }} bg-danger {{ else if ge $val.Diff.BytesPerOp 10.0 }} bg-success {{ end }}">{{ formatFloat $val.Diff.BytesPerOp }}</td>

                        <td class="text-right">{{ $val.Last.MBPerSecStr }}</td>
                        <td class="text-right">{{ $val.Current.MBPerSecStr }}</td>
                        <td class="text-right {{if le $val.Diff.MBPerSec -10.0 }} bg-danger {{ else if ge $val.Diff.MBPerSec 10.0 }} bg-success {{ end }}">{{ formatFloat $val.Diff.MBPerSec }}</td>

                        <td class="text-right">{{ $val.Last.AllocsPerOpStr }}</td>
                        <td class="text-right">{{ $val.Current.AllocsPerOpStr }}</td>
                        <td class="text-right {{if le $val.Diff.AllocsPerOp -10.0 }} bg-danger {{ else if ge $val.Diff.AllocsPerOp 10.0 }} bg-success {{ end }}">{{ formatFloat $val.Diff.AllocsPerOp }}</td>
                    </tr>
                    {{end}}
                    </tbody>
                </table>
                {{ else if not .microbenchmark }}
                <div class="alert alert-warning" role="alert">
                    No micro benchmark results. You can <a href="/request_benchmark?s={{ .search }}&type=microbench">request</a> a run.
                </div>
                {{ end }}
            </div>
            {{ end }}
        </div>
    </section>

    <!------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------>

    </div>

  {{template "footerHTML" .}}

<script>
    function macroCmpBarCharts(type, macro) {
        for (const macroKey in macro) {
            var compareMacros = macro[macroKey]["Compare"]["Result"]
            var referenceMacros = macro[macroKey]["Reference"]["Result"]

            var labels = []
            var dataCmp = []
            var dataRef = []
            var wants = ["total", "reads", "writes", "other"]
            for (var x in referenceMacros["qps"]) {
                if (wants.includes(x)) {
                    labels.push(x)
                    dataCmp.push(compareMacros["qps"][x])
                    dataRef.push(referenceMacros["qps"][x])
                }
            }
            const data = {
                labels: labels,
                datasets: [
                    {
                        label: '{{.compare.short}}',
                        data: dataCmp,
                        color: 'black',
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(255, 99, 132, 0.5)',
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                        ],
                    },
                    {
                        label: '{{.reference.short}}',
                        data: dataRef,
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(54, 162, 235, 1)',
                        ],
                    }
                ]
            };
            const config = {
                type: 'bar',
                data: data,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                        }
                    }
                },
            };
            var ctx = document.getElementById(type+"-bar-chart").getContext('2d');
            var chart = new Chart(ctx, config)
        }
    }

    var macro = {{ .macrobenchmark }}

    for (const macroKey in macro) {
        macroCmpBarCharts(macroKey, macro[macroKey])
    }

</script>

</body>

</html>
